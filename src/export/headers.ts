import type { SupportedFormat, FilterListMetadata } from "../types.js";

export function generateHeader(
  meta: FilterListMetadata,
  format: SupportedFormat,
): string {
  // Common header for all formats
  const commonHeader = [
    "! Title: " + meta.title,
    "! Description: " + meta.description,
    "! Homepage: " + meta.homepage,
    "! Version: " + meta.version,
    "! Last updated: " + meta.lastUpdated,
  ];

  // Format-specific additions
  const additionalLines: string[] = [];

  switch (format) {
    case "hosts":
      additionalLines.push(
        "! Format: Hosts",
        "! This file is in hosts file format and can be used as system hosts file",
      );
      break;
    case "dnsmasq":
      additionalLines.push(
        "! Format: dnsmasq",
        "! This file contains rules suitable for dnsmasq DNS server",
      );
      break;
    case "unbound":
      additionalLines.push(
        "! Format: Unbound",
        "! This file contains rules suitable for Unbound DNS server",
      );
      break;
    case "bind":
      additionalLines.push(
        "! Format: BIND",
        "! This file contains rules suitable for BIND DNS server",
      );
      break;
    case "privoxy":
      additionalLines.push(
        "! Format: Privoxy",
        "! This file contains rules suitable for Privoxy proxy server",
      );
      break;
    case "shadowrocket":
      additionalLines.push(
        "! Format: Shadowrocket",
        "! This file contains rules suitable for Shadowrocket app",
      );
      break;
    case "adguard":
      additionalLines.push(
        "! Format: AdGuard",
        "! This file contains rules optimized for AdGuard products",
      );
      break;
    case "abp":
      additionalLines.push(
        "! Format: ABP",
        "! This file contains rules compatible with Adblock Plus",
      );
      break;
    case "all":
      additionalLines.push(
        "! Format: All",
        "! This file contains all rules in their original formats",
      );
      break;
  }

  // Add statistics if available
  if (meta.stats) {
    additionalLines.push(
      "! Total Rules: " + (meta.stats.totalRules || "N/A"),
      "! Blocking Rules: " + (meta.stats.blockingRules || "N/A"),
      "! Exception Rules: " + (meta.stats.exceptionRules || "N/A"),
    );
  }

  // Add license and generator info
  additionalLines.push(
    "! License: " + (meta.license || "Unspecified"),
    "! Generated by Blockingmachine " + (meta.generatorVersion || ""),
    "", // Empty line at the end
  );

  return [...commonHeader, ...additionalLines].join("\n");
}
